#
# ~/.functions
#
# Functions shared between bash and zsh

#TODO Add more error checking
# https://citizen428.net/blog/bash-error-handling-with-trap

#XXX These work for bash, not zsh
#set -o errtrace
#set -o nounset
#set -o pipefail

#TODO Use Color and format in more functions
# See /usr/bin/browser-vacuum for examples
#format="$(tput cr)$(tput cuf 45)"
#echo -en "${format}[${YLW}username${RST}] ${GRN}Scanning for test${RST}"

RED="\e[01;31m" GRN="\e[01;32m" YLW="\e[01;33m" RST="\e[00m"

#
# # ex - archive extractor
# # usage: ex <file>
ex ()
{
  if [ -f "$1" ] ; then
    case $1 in
      *.tar.bz2)   tar xjf "$1"   ;;
      *.tar.gz)    tar xzf "$1"   ;;
      *.bz2)       bunzip2 "$1"   ;;
      *.rar)       unrar x "$1"   ;;
      *.gz)        gunzip "$1"    ;;
      *.tar)       tar xf "$1"    ;;
      *.tbz2)      tar xjf "$1"   ;;
      *.tgz)       tar xzf "$1"   ;;
      *.zip)       unzip "$1"     ;;
      *.Z)         uncompress "$1";;
      *.7z)        7z x "$1"      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# Grep ps output and always display the first line from ps, the column names
function psgrep {
  if [[ $# -eq 1 && $1 != '-h' && $1 != '--help' ]]
  then
    ps aux | head -n 1
    ps aux | awk '{if(NR>1)print}' | grep -Ei "$1"
  else
    echo "Usage: $0 [GREP_OPTIONS] regexp"
  fi
}

# Gets TOR ip
function torip {
  http_proxy="http://localhost:8118" wget -q http://ipchicken.com -O- | \
    grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}){1}' | \
    tr -d '[:space:]'
  echo
}

# Renew TOR ip
function renewtorip {
  sudo systemctl restart tor
  sudo systemctl restart privoxy
}

# Restart KDE; Useful if hung
function restartkde {
  export DISPLAY=:0
  kquitapp5 plasmashell
  kstart5 plasmashell
}

# Re-detect sound devices
function soundfix {
  systemctl --user restart pulseaudio.service
}

# Extract icon from exe
function exeicon {
  7z x "$*" .rsrc/ICON
  mv .rsrc dotrsrc # Unhide it
}

# Clean temporary files created by pacman, pamac, octopi, yay, flatpak, snap, and brew
function sweep {

  # Turn ally (accessibility) features off to avoid getting an error message
  export NO_AT_BRIDGE=1
  unset DBUS_SESSION_BUS_ADDRESS

  sudo -E -u root bash << 'EOF'             # Execute all as root

  # We must close them before cleaning
  kill -9 $(pidof firefox) 2>/dev/null
  kill -9 $(pidof chromium) 2>/dev/null

  # Do it as root
  bleachbit --clean \
    audacious.cache \
    audacious.log \
    audacious.mru \
    chromium.cache \
    chromium.cookies \
    chromium.dom \
    chromium.form_history \
    chromium.site_preferences \
    chromium.sync \
    chromium.vacuum \
    deepscan.backup \
    deepscan.ds_store \
    deepscan.thumbs_db \
    deepscan.tmp \
    discord.cache \
    discord.cookies \
    discord.history \
    discord.vacuum \
    evolution.cache \
    filezilla.mru \
    firefox.cache \
    firefox.cookies \
    firefox.crash_reports \
    firefox.dom \
    firefox.forms \
    firefox.site_preferences \
    firefox.vacuum \
    gimp.tmp \
    google_chrome.cache \
    google_chrome.cookies \
    google_chrome.dom \
    google_chrome.form_history \
    google_chrome.search_engines \
    google_chrome.site_preferences \
    google_chrome.sync \
    google_chrome.vacuum \
    google_earth.temporary_files \
    gpodder.cache \
    gpodder.downloaded_podcasts \
    gpodder.logs \
    gpodder.vacuum \
    gvfs.metadata \
    journald.clean \
    java.cache \
    kde.cache \
    kde.tmp \
    kodi_xbmc.crashlog \
    kodi_xbmc.th-music \
    kodi_xbmc.th-pics \
    kodi_xbmc.th-video \
    kodi_xbmc.tmp \
    libreoffice.history \
    marble.cache \
    marble.maps \
    marble.routing \
    marble.tracking \
    nexuiz.cache \
    notify-osd.logs \
    openofficeorg.cache \
    openofficeorg.recent_documents \
    skype.chat_logs \
    skype.installers \
    system.cache \
    system.desktop_entry \
    system.localizations \
    system.recent_documents \
    system.rotated_logs \
    system.tmp \
    system.trash \
    thumbnails.cache \
    thunderbird.cache \
    thunderbird.cookies \
    thunderbird.index \
    thunderbird.passwords \
    thunderbird.sessionjson \
    thunderbird.vacuum \
    trashes.trashes_removeable \
    vlc.memory_dump \
    vlc.mru \
    wine.tmp \
    winetricks.temporary_files \
    x11.debug_logs \
    zoom.cache \
    zoom.logs \
    zoom.recordings

  # Do it as non root
  sudo -E -u "$(getent passwd 1000 | awk -F: '{print $1}')" \
  bleachbit --clean \
    audacious.cache \
    audacious.log \
    audacious.mru \
    chromium.cache \
    chromium.cookies \
    chromium.dom \
    chromium.form_history \
    chromium.site_preferences \
    chromium.sync \
    chromium.vacuum \
    deepscan.backup \
    deepscan.ds_store \
    deepscan.thumbs_db \
    deepscan.tmp \
    discord.cache \
    discord.cookies \
    discord.history \
    discord.vacuum \
    evolution.cache \
    filezilla.mru \
    firefox.cache \
    firefox.cookies \
    firefox.crash_reports \
    firefox.dom \
    firefox.forms \
    firefox.site_preferences \
    firefox.vacuum \
    gimp.tmp \
    google_chrome.cache \
    google_chrome.cookies \
    google_chrome.dom \
    google_chrome.form_history \
    google_chrome.search_engines \
    google_chrome.site_preferences \
    google_chrome.sync \
    google_chrome.vacuum \
    google_earth.temporary_files \
    gpodder.cache \
    gpodder.downloaded_podcasts \
    gpodder.logs \
    gpodder.vacuum \
    gvfs.metadata \
    journald.clean \
    java.cache \
    kde.cache \
    kde.tmp \
    kodi_xbmc.crashlog \
    kodi_xbmc.th-music \
    kodi_xbmc.th-pics \
    kodi_xbmc.th-video \
    kodi_xbmc.tmp \
    libreoffice.history \
    marble.cache \
    marble.maps \
    marble.routing \
    marble.tracking \
    nexuiz.cache \
    notify-osd.logs \
    openofficeorg.cache \
    openofficeorg.recent_documents \
    skype.chat_logs \
    skype.installers \
    system.cache \
    system.desktop_entry \
    system.localizations \
    system.recent_documents \
    system.rotated_logs \
    system.tmp \
    system.trash \
    thumbnails.cache \
    thunderbird.cache \
    thunderbird.cookies \
    thunderbird.index \
    thunderbird.passwords \
    thunderbird.sessionjson \
    thunderbird.vacuum \
    trashes.trashes_removeable \
    vlc.memory_dump \
    vlc.mru \
    wine.tmp \
    winetricks.temporary_files \
    x11.debug_logs \
    zoom.cache \
    zoom.logs \
    zoom.recordings

  # Remove cache files if yay is not running
  killall -q -0 yay || rm -rvf $HOME/.cache/yay/* /root/.cache/yay/*

  # Clear all pacman download cache and databases
  pacman -Scc --noconfirm

  # Clear logs older than 15 days
  journalctl --vacuum-time=15d

  # Removes old revisions of snaps
  # CLOSE ALL SNAPS BEFORE RUNNING THIS
  snap list --all | awk '/disabled/{print $1, $3}' |
    while read snapname revision; do
        snap remove "$snapname" --revision="$revision"
    done
  #XXX http://mywiki.wooledge.org/BashProgramming/05

  yes | flatpak uninstall --unused
  rm -rvf /var/lib/flatpak/.removed
  # Flatpak also uses /var/tmp

  # Clear cache directories
  rm -rf /home/bullshark/.googleearth/Cache/*
  rm -rf /home/bullshark/.local/share/Steam/config/htmlcache/Cache/*
  rm -rf /home/bullshark/.local/share/Steam/steam/cached/*
  rm -rf /home/bullshark/.config/Caprine/Cache/*
  rm -rf /home/bullshark/.config/Caprine/Code\ Cache/*
  rm -rf /home/bullshark/.cache/*
  rm -rf /root/.cache/*
  find /tmp -type f ! -name '.veracrypt*' -delete
  rm -rf /var/tmp/*
  rm -rf /var/cache/*

EOF

  # Yay and pamac cleanup
  yes | yay -Scc
  yay -Yc

  # We closed Firefox and Chromium earlier already
  browser-vacuum
}

# View manpages in vim with vim's color scheme and less macros
function man {
  if [[ $# != 0 && $1 != '-k' && $1 != '-h' && $1 != '--help' && $(command man -w "$@" 1>/dev/null 2>&1; echo $?) == 0 ]]
  then

      /usr/bin/man "$@" 2>/dev/null | \

        col -b | \
        /usr/share/vim/vim??/macros/less.sh -R -c 'set ft=man nomod nolist nonumber' -

  else
    /usr/bin/man "$@"

  fi
}

# Runs MAC address against IEEE OUI list
# to return device vendor name
function oui {
  mac=$(echo "$1" | sed 's/[:-]//g' | tr "[a-f]" "[A-F]" | grep -Eo "^[0-9A-F]{6}")
  #echo $mac

  # http://standards-oui.ieee.org/oui/oui.txt
  if [[ ! -f /var/tmp/oui.txt ]]; then
    wget https://linuxnet.ca/ieee/oui.txt -qO /var/tmp/oui.txt >/dev/null 2>&1
  fi

  grep $mac /var/tmp/oui.txt | cut -d')' -f2 | tr -d '\t'
}

# Find hosts on the lan and does oui lookup on each
function lan {
  echo -e "${RED}nmap${RST}:"
  nmap -n -sn 192.168.0.0/23 -oG - 2>&1 | awk '/Up$/{print $2}'
  echo -e "${RED}/proc/net/arp${RST}:"
  for token in $(grep -v '00:00:00:00:00:00' /proc/net/arp | tail -n +2 | awk -F' ' '{print $1, $4}' | sed 1d);
  do
    if [[ $token =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
      echo -en "$token\t"
    elif [[ $token =~ ^([A-Za-z0-9]{2}:){5}[A-Za-z0-9]{2} ]]; then
      manufacturer=$(oui $token)
      if [ -n "$manufacturer" ]; then
        echo "$manufacturer"
      else
        echo Unknown
      fi
    fi
  done
}

# Find all git repos in home and update them
function update-all-repos {

  for dir in $(find ~/ -type d -name '.git'); do

    repo=$(echo $dir | sed "s/\.git$//")

    cd $repo
    echo "Repo: $repo"

    git pull

  done
}

# Disable ipv6 - Useful for connecting to an ipv4 only vpn and preventing ipv6 leakage
function disable_ipv6 {
  sudo -i -u root bash << 'EOF'             # Execute all as root
  sysctl -w net.ipv6.conf.all.disable_ipv6=1
  sysctl -w net.ipv6.conf.default.disable_ipv6=1
  sysctl -w net.ipv6.conf.lo.disable_ipv6=1
EOF
}

# Enable ipv6
function enable_ipv6 {
  sudo -i -u root bash << 'EOF'             # Execute all as root
  sysctl -w net.ipv6.conf.all.disable_ipv6=0
  sysctl -w net.ipv6.conf.default.disable_ipv6=0
  sysctl -w net.ipv6.conf.lo.disable_ipv6=0
  systemctl restart NetworkManager.service
EOF
}

# Backup a copy of a file with a time stamp
function stamp {
  now=$(date +"%F")
  sudo cp -v "$1" "$1-$now"
}

# Makes a backup copy, Must be in the same dir as the file to backup
function bak {
  # Don't overwrite if the backup file already exists
  if [[ -w . ]]; then
    cp -vi "$1"{,_backup}
  else
    sudo cp -vi "$1"{,_backup}
  fi
}

# Get a list of all commands from explicitly installed packages, not dependencies
function mycmds {
  for p in $(pacman -Qet | awk -F\  '{print $1}')
  do
    pacman -Ql "$p" | grep -E '/[s]?bin/.+'
  done
}

# Similar as above
function lscmds() {
  for p in $(echo $PATH | sed 's/:/ /g')
  do
    echo "$p:"
    sudo ls "$p"
    echo
  done
}

# Check what is auto starting
function autostart {
  sudo -v

  systemctl --system list-unit-files | grep enabled
  systemctl --user list-unit-files | grep enabled
  systemctl --global list-unit-files | grep enabled

  sudo ls /etc/xdg/autostart \
          /etc/skel/.config/autostart \
          /root/.config/autostart \
          /usr/share/kservices5

  for dir in `getent passwd | awk -F':' '{print $6}' | sort -u`
  do
    if [ -d "$dir/.config/autostart" ] ; then
    	sudo ls "$dir"/.config/autostart
    fi

    if [ -d "$dir/.config/autostart-scripts" ] ; then
    	sudo ls "$dir/.config/autostart-scripts"
    fi
  done

}

# Find all files not owned by any package except under /home and log the results
function not-owned {
  sudo find / -mount -path /home -prune -false -o -type f -print \
    -exec bash -c "pacman -Qo '{}' 2>&1 | grep --line-buffered 'No package owns' 2>&1 " \; 2>&1 | \
    tee "$HOME/files_not_owned.log"
}

# Remove duplicates from the PATH
function fixpath {
  export PATH="`echo $PATH | tr ':' '\n' | sort -u | tr '\n' ':' | sed 's/:$//'`"
}

# Celcius to fahrenheit
function ctof {
  temp=$1;
  echo $[(${temp}*9/5)+32]
}

# List modules
function lsmods {
  find /lib/modules/`uname -r`/ -type f -iname '*.o' -or -iname '*.ko' | less
}

# Prevent these options from being used outside of this file
#set +o errtrace
#set +o nounset
#set +o pipefail

# vi: ft=sh

