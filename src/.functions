#
# ~/.functions
#
# Functions shared between bash and zsh

#TODO Add error checking
#TODO Use Color and format in more functions
# See /usr/bin/browser-vacuum for examples
#format="$(tput cr)$(tput cuf 45)"
#echo -en "${format}[${YLW}username${RST}] ${GRN}Scanning for test${RST}"

RED="\e[01;31m" GRN="\e[01;32m" YLW="\e[01;33m" RST="\e[00m"

#
# # ex - archive extractor
# # usage: ex <file>
ex ()
{
  if [ -f "$1" ] ; then
    case $1 in
      *.tar.bz2)   tar xjf "$1"   ;;
      *.tar.gz)    tar xzf "$1"   ;;
      *.bz2)       bunzip2 "$1"   ;;
      *.rar)       unrar x "$1"   ;;
      *.gz)        gunzip "$1"    ;;
      *.tar)       tar xf "$1"    ;;
      *.tbz2)      tar xjf "$1"   ;;
      *.tgz)       tar xzf "$1"   ;;
      *.zip)       unzip "$1"     ;;
      *.Z)         uncompress "$1";;
      *.7z)        7z x "$1"      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# Grep ps output and always display the first line from ps, the column names
function psgrep {
  if [[ $# -eq 1 && $1 != '-h' && $1 != '--help' ]]
  then
    ps aux | head -n 1
    ps aux | awk '{if(NR>1)print}' | grep -Ei "$1"
  else
    echo "Usage: $0 [GREP_OPTIONS] regexp"
  fi
}

# Gets TOR ip
function torip {
  http_proxy="http://localhost:8118" wget -q http://ipchicken.com -O- | \
    grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}){1}' | \
    tr -d '[:space:]'
  echo
}

# Renew TOR ip
function renewtorip {
  sudo systemctl restart tor
  sudo systemctl restart privoxy
}

# Restart KDE; Useful if hung
function restartkde {
  export DISPLAY=:0
  kquitapp5 plasmashell
  kstart5 plasmashell
}

# Re-detect sound devices
function soundfix {
  systemctl --user restart pulseaudio.service
}

# Extract icon from exe
function exeicon {
  7z x "$*" .rsrc/ICON
  mv .rsrc dotrsrc # Unhide it
}

# Clean temporary files created by pacman, pamac, octopi, yay, flatpak, snap, and brew
function sweep {
  sudo -i -u root bash << 'EOF'             # Execute all as root
  # Remove cache files if yay is not running
  killall -q -0 yay || rm -rvf $HOME/.cache/yay/* /root/.cache/yay/*

  # Clear all pacman download cache and databases
  pacman -Scc --noconfirm

  # Clear logs older than 20 days
  journalctl --vacuum-time=20d

  # Removes old revisions of snaps
  # CLOSE ALL SNAPS BEFORE RUNNING THIS
  snap list --all | awk '/disabled/{print $1, $3}' |
    while read snapname revision; do
        snap remove "$snapname" --revision="$revision"
    done
  #XXX http://mywiki.wooledge.org/BashProgramming/05
EOF
  # Yay and pamac cleanup
  yes | yay -Scc
  yay -Yc

  #TODO Not accepting password
#  pamac clean -k 0

  browser-vacuum

  # Bleachbit
  #TODO Give the cleaners to use, so it can run automatically without the gui
  # Example:
  # bleachbit chromium.vacuum firefox.vacuum gpodder.vacuum thunderbird.vacuum
  # sudo bleachbit system.localizations system.trash
  #
  # And store them in a variable
  export DISPLAY=:0
  bleachbit --list-cleaners
  sudo bleachbit --list-cleaners
  bleachbit
  sudo bleachbit


audacious.cache
audacious.log

#audacious.mru
#bash.history
#beagle.cache
#beagle.index
#beagle.logs

chromium.cache
chromium.cookies
chromium.dom
chromium.form_history
#chromium.history
#chromium.passwords
#chromium.search_engines
#chromium.session
#chromium.sync
chromium.vacuum

d4x.history

deepscan.backup
deepscan.ds_store
deepscan.thumbs_db
deepscan.tmp
deepscan.vim_swap_root
deepscan.vim_swap_user

discord.cache
discord.cookies
discord.history
discord.vacuum

dnf.autoremove
dnf.clean_all

easytag.history
easytag.logs

elinks.history

emesene.cache
emesene.logs

epiphany.cache
epiphany.cookies
epiphany.dom
epiphany.passwords
epiphany.places

evolution.cache

exaile.cache
exaile.downloaded_podcasts
exaile.log

filezilla.mru

firefox.backup
firefox.cache
firefox.cookies
firefox.crash_reports
firefox.dom
firefox.forms
firefox.passwords
firefox.session_restore
firefox.site_preferences
firefox.url_history
firefox.vacuum

flash.cache
flash.cookies

gedit.recent_documents

gftp.cache
gftp.logs

gimp.tmp

gl-117.debug_logs

gnome.run
gnome.search_history

google_chrome.cache
google_chrome.cookies
google_chrome.dom
google_chrome.form_history
google_chrome.history
google_chrome.passwords
google_chrome.search_engines
google_chrome.session
google_chrome.sync
google_chrome.vacuum

google_earth.temporary_files

google_toolbar.search_history

gpodder.cache
gpodder.downloaded_podcasts
gpodder.logs
gpodder.vacuum

gwenview.recent_documents

hexchat.logs

hippo_opensim_viewer.cache
hippo_opensim_viewer.logs

java.cache

journald.clean

kde.cache
kde.recent_documents
kde.tmp

konqueror.cookies
konqueror.current_session
konqueror.url_history

libreoffice.cache
libreoffice.history

liferea.cache
liferea.cookies
liferea.vacuum

links2.history

midnightcommander.history

nexuiz.cache

octave.history

openofficeorg.cache
openofficeorg.recent_documents

rhythmbox.cache
rhythmbox.history

screenlets.logs

sqlite3.history

system.cache
system.clipboard
system.custom
system.desktop_entry
system.free_disk_space
system.localizations
system.memory
system.recent_documents
system.rotated_logs
system.tmp
system.trash

thumbnails.cache

thunderbird.cache
thunderbird.cookies
thunderbird.index
#thunderbird.passwords
thunderbird.vacuum

tremulous.cache

vim.history

vlc.memory_dump
vlc.mru

warzone2100.logs

waterfox.backup
waterfox.cache
waterfox.cookies
waterfox.crash_reports
waterfox.dom
waterfox.forms
waterfox.passwords
waterfox.session_restore
waterfox.site_preferences
waterfox.url_history
waterfox.vacuum

wine.tmp
winetricks.temporary_files
x11.debug_logs

xine.cache

  # Flatpak uses /var/tmp and that's cleared by /etc/rc.local on boot
}

# View manpages in vim with vim's color scheme and less macros
#TODO This doesn't give a man page or any output: man generate-domains-blacklist
#FIXME "man npm" fails and "command man npm" works
function man {
  if [[ $# != 0 && $1 != '-k' && $1 != '-h' && $1 != '--help' ]]
  then
    #command man --whatis "$@" 1>/dev/null 2>&1 || return $? # Don't launch vim if no man pages are found

    /usr/bin/man "$@" | \
      col -b | \
      /usr/share/vim/vim82/macros/less.sh -R -c 'set ft=man nomod nolist nonumber' -
  else
    /usr/bin/man "$@"
  fi
}

# Find hosts on the lan
#TODO MAC OUI
# /usr/share/macchanger/OUI.list
# /usr/share/macchanger/wireless.list
#TODO Change the nmap command
function lan {
  echo -e "${RED}nmap${RST}:"
  nmap -n -sn 192.168.0.0/23 -oG - 2>&1 | awk '/Up$/{print $2}'
  echo -e "${RED}/proc/net/arp${RST}:"
  grep -v '00:00:00:00:00:00' /proc/net/arp
}

# Disable ipv6 - Useful for connecting to an ipv4 only vpn and preventing ipv6 leakage
function disable_ipv6 {
  sudo -i -u root bash << 'EOF'             # Execute all as root
  sysctl -w net.ipv6.conf.all.disable_ipv6=1
  sysctl -w net.ipv6.conf.default.disable_ipv6=1
  sysctl -w net.ipv6.conf.lo.disable_ipv6=1
EOF
}

# Enable ipv6
function enable_ipv6 {
  sudo -i -u root bash << 'EOF'             # Execute all as root
  sysctl -w net.ipv6.conf.all.disable_ipv6=0
  sysctl -w net.ipv6.conf.default.disable_ipv6=0
  sysctl -w net.ipv6.conf.lo.disable_ipv6=0
  systemctl restart NetworkManager.service
EOF
}

# Backup a copy of a file with a time stamp
function stamp {
  now=$(date +"%F")
  command sudo cp -v "$1" "$1-$now"
}

# Makes a backup copy
function bak {
  # Don't overwrite if the backup file already exists
  sudo cp -vi "$1"{,_backup}
  # Prevent the backup from being read as a configuration file
  # Example: ls /etc | grep -E '.+\.d'
  chmod -c 0000 "$1"_backup
}


# Get a list of all commands from explicitly installed packages, not dependencies
function cli {
  for p in $(pacman -Qet | awk -F\  '{print $1}')
  do
    pacman -Ql "$p" | grep -E '/[s]?bin/.+'
  done

#  sudo echo -en '' # Make sudo ask for the password before starting the loop
#
#  IFS=:
#  for p in $(echo $PATH | sed 's/ /\\ /g')
#  do
#    echo "$p:"
#    sudo ls "$p"
#    echo
#  done

}

# Check what is auto starting
#TODO systemd stuff
function autostart {
#  sudo systemctl --system --all list*
#  sudo systemctl --user   --all list*
#  sudo systemctl --global --all list*
  sudo ls /etc/xdg/autostart \
          /etc/skel/.config/autostart \
          /root/.config/autostart \
          /usr/share/kservices5

  for dir in `getent passwd | awk -F':' '{print $6}' | sort -u`
  do
    if [ -d "$dir/.config/autostart" ] ; then
    	sudo ls "$dir"/.config/autostart
    fi

    if [ -d "$dir/.config/autostart-scripts" ] ; then
    	sudo ls "$dir/.config/autostart-scripts"
    fi
  done

}

# Find all files not owned by any package except under /home and log the results
function not-owned {
  sudo find / -mount -path /home -prune -false -o -type f -print \
    -exec bash -c "pacman -Qo '{}' 2>&1 | grep --line-buffered 'No package owns' 2>&1 " \; 2>&1 | \
    tee "$HOME/files_not_owned.log"
}

# Remove duplicates from the PATH
function fixpath {
  export PATH="`echo $PATH | tr ':' '\n' | sort -u | tr '\n' ':' | sed 's/:$//'`"
}

# vi: ft=sh

