#!/usr/bin/env bash
#
# This script avoids making the entire home folder into a git repo
# To upload a few scripts and configs to a public git repository
#
# Avoid zsh from having a git prompt while anywhere in the user's home directory
#
# Steps:
#   1. Make a list of path/files to be tracked and store in a bash array or w/e is most efficient
#   2. Make a temporary directory, mkdir -p path/directory
#   3. Cd to that directory and git clone repo with scripts and configs
#   4. Copy the list/array of path/files from step 1 into the directory created in step 2
#        And overwrite any existing files because they are tracked remotely anyways
#   5. Git commit -a, commit all files with changes
#   6. Git push those changes
#   7. Now that all the files and their changes are tracked, delete the temporary directdory from step 1
#         With all the files in it because it will be recreated when needed
#
# psuedo-code - might be the wrong syntax for bash

github_user="BullShark"
github_project="dotfiles"
dir="/var/tmp"
repo="git://github.com/$github_user/$github_project.git"

files = { "~/bin/dotfiles", # Including this script
          "~/.bashrc",
          "~/.bash_profile", 
          "~/.vimrc",
          "~/.gvimrc",
          "~/bin/podw",
          "~/bin/pod" }

cd $dir
git clone $repo

dir="$dir/$github_project"

for each in files
do
  rsync -opts $each $dir/
done

git commit -a -m "Updated" # Made to run as non-interactive by cron
git push

if $dir =~ '^(/tmp/.+|/var/tmp/).+' && rm -rf $dir || echo "Could not execute rm -rf $dir because it's not a tmp directory"

# Set debugging options
function debug {
  set -o nounset
  set -o xtrace
  set -o verbose
}

# Unset debugging options
function xdebug {
  set +o nounset
  set +o xtrace
  set +o verbose
}

